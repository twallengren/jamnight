// Mocks generated by Mockito 5.4.2 from annotations
// in jamnight/test/data/datastore_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i10;

import 'package:jamnight/data/datastore.dart' as _i8;
import 'package:jamnight/data/jamnightdao.dart' as _i4;
import 'package:jamnight/model/instrument/instrument.dart' as _i9;
import 'package:jamnight/model/performer/performer.dart' as _i7;
import 'package:logger/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:quiver/collection.dart' as _i3;
import 'package:sqflite/sqflite.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMultimap_1<K, V> extends _i1.SmartFake
    implements _i3.Multimap<K, V> {
  _FakeMultimap_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [JamNightDAO].
///
/// See the documentation for Mockito's code generation for more information.
class MockJamNightDAO extends _i1.Mock implements _i4.JamNightDAO {
  @override
  _i5.Future<_i6.Database?> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i5.Future<_i6.Database?>.value(),
        returnValueForMissingStub: _i5.Future<_i6.Database?>.value(),
      ) as _i5.Future<_i6.Database?>);
  @override
  _i5.Future<void> insertPerformer(_i7.Performer? performer) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertPerformer,
          [performer],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<List<_i7.Performer>> getPerformers() => (super.noSuchMethod(
        Invocation.method(
          #getPerformers,
          [],
        ),
        returnValue: _i5.Future<List<_i7.Performer>>.value(<_i7.Performer>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i7.Performer>>.value(<_i7.Performer>[]),
      ) as _i5.Future<List<_i7.Performer>>);
  @override
  _i5.Future<List<_i7.Performer>> getJamNightRegularsNotInCurrentJam() =>
      (super.noSuchMethod(
        Invocation.method(
          #getJamNightRegularsNotInCurrentJam,
          [],
        ),
        returnValue: _i5.Future<List<_i7.Performer>>.value(<_i7.Performer>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i7.Performer>>.value(<_i7.Performer>[]),
      ) as _i5.Future<List<_i7.Performer>>);
  @override
  _i5.Future<void> updatePerformer(_i7.Performer? performer) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePerformer,
          [performer],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<void> deletePerformer(String? name) => (super.noSuchMethod(
        Invocation.method(
          #deletePerformer,
          [name],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [DataStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataStore extends _i1.Mock implements _i8.DataStore {
  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);
  @override
  List<_i7.Performer> get allPerformers => (super.noSuchMethod(
        Invocation.getter(#allPerformers),
        returnValue: <_i7.Performer>[],
        returnValueForMissingStub: <_i7.Performer>[],
      ) as List<_i7.Performer>);
  @override
  List<_i7.Performer> get currentJamPerformers => (super.noSuchMethod(
        Invocation.getter(#currentJamPerformers),
        returnValue: <_i7.Performer>[],
        returnValueForMissingStub: <_i7.Performer>[],
      ) as List<_i7.Performer>);
  @override
  _i3.Multimap<_i9.Instrument, _i7.Performer> get performersByInstrument =>
      (super.noSuchMethod(
        Invocation.getter(#performersByInstrument),
        returnValue: _FakeMultimap_1<_i9.Instrument, _i7.Performer>(
          this,
          Invocation.getter(#performersByInstrument),
        ),
        returnValueForMissingStub:
            _FakeMultimap_1<_i9.Instrument, _i7.Performer>(
          this,
          Invocation.getter(#performersByInstrument),
        ),
      ) as _i3.Multimap<_i9.Instrument, _i7.Performer>);
  @override
  List<_i7.Performer> get recommendedPerformers => (super.noSuchMethod(
        Invocation.getter(#recommendedPerformers),
        returnValue: <_i7.Performer>[],
        returnValueForMissingStub: <_i7.Performer>[],
      ) as List<_i7.Performer>);
  @override
  List<_i7.Performer> get selectedPerformers => (super.noSuchMethod(
        Invocation.getter(#selectedPerformers),
        returnValue: <_i7.Performer>[],
        returnValueForMissingStub: <_i7.Performer>[],
      ) as List<_i7.Performer>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void addPerformerToCurrentJam(_i7.Performer? performer) => super.noSuchMethod(
        Invocation.method(
          #addPerformerToCurrentJam,
          [performer],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removePerformerFromCurrentJam(_i7.Performer? performer) =>
      super.noSuchMethod(
        Invocation.method(
          #removePerformerFromCurrentJam,
          [performer],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void savePerformerAsJamRegular(_i7.Performer? performer) =>
      super.noSuchMethod(
        Invocation.method(
          #savePerformerAsJamRegular,
          [performer],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void movePerformerFromRecommendedToSelected(int? rowIndex) =>
      super.noSuchMethod(
        Invocation.method(
          #movePerformerFromRecommendedToSelected,
          [rowIndex],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removePerformerFromSelectedPerformers(int? rowIndex) =>
      super.noSuchMethod(
        Invocation.method(
          #removePerformerFromSelectedPerformers,
          [rowIndex],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void finalizeSelectedBand() => super.noSuchMethod(
        Invocation.method(
          #finalizeSelectedBand,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<List<_i7.Performer>> getJamNightRegularsNotInCurrentJam() =>
      (super.noSuchMethod(
        Invocation.method(
          #getJamNightRegularsNotInCurrentJam,
          [],
        ),
        returnValue: _i5.Future<List<_i7.Performer>>.value(<_i7.Performer>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i7.Performer>>.value(<_i7.Performer>[]),
      ) as _i5.Future<List<_i7.Performer>>);
  @override
  _i5.Future<List<_i7.Performer>> sortPerformersByName(
          _i5.Future<List<_i7.Performer>>? performersFuture) =>
      (super.noSuchMethod(
        Invocation.method(
          #sortPerformersByName,
          [performersFuture],
        ),
        returnValue: _i5.Future<List<_i7.Performer>>.value(<_i7.Performer>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i7.Performer>>.value(<_i7.Performer>[]),
      ) as _i5.Future<List<_i7.Performer>>);
  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
